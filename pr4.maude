*** PRÁCTICA DE NICOLÁS ALCAINE CAMILLI Y CARLOS MARTÍN TESTILLANOS


fmod PEDIDO is
 pr NAT .
 sort Pedido .

 op pv : -> Pedido [ctor] .
 op pedido : Nat Nat Nat -> Pedido [ctor] . ***idCarniceria cantVacuno cantCerdo

endfm


fmod FURGONETA is
 sorts Furgo EstadoFurgoneta .
 pr NAT .
 pr BOOL .

 op fv : -> Furgo [ctor] .
 op furgo : Nat Nat Nat Nat EstadoFurgoneta -> Furgo [ctor] . ***idCarniceria idGranja cantVacuno cantCerdo
 ops reparto vuelta esperando : -> EstadoFurgoneta [ctor] .
 op cambiar-a-reparto : Nat Nat Nat Furgo -> Furgo .
 ceq cambiar-a-reparto(idCarniceria, cantVacuno, cantCerdo, furgo(0, idGranja, 0, 0, estadoFurgo)) 
        = furgo(idCarniceria, idGranja, cantVacuno, cantCerdo, reparto)
        if estadoFurgo == esperando .
 vars idCarniceria idGranja cantVacuno cantCerdo : Nat .
 var furgoneta : Furgo .
 var estadoFurgo : EstadoFurgoneta .

endfm


fmod GRANJA is
 pr FURGONETA .
 pr PEDIDO .
 pr BOOL .
 pr NAT .

 sorts Granja Animal AnimalList VacaList CerdoList PedidosList HuecoGranja .
 subsort Animal < VacaList < AnimalList .
 subsort Animal < CerdoList < AnimalList .
 subsort Pedido < PedidosList .

 op gv : -> Granja [ctor] .
 op alistv : -> AnimalList [ctor] .
 op plistv : -> PedidosList [ctor] .
 ops vaca cerdo : -> Animal [ctor] .

 op __ : AnimalList AnimalList -> AnimalList [assoc ctor id: alistv] .
 op __ : PedidosList PedidosList -> PedidosList [assoc ctor id: plistv] .
 op hueco-granja : Furgo Bool -> HuecoGranja [ctor] . ***true == está
 op restar-animales-granja : Nat AnimalList -> AnimalList .
 op tam : AnimalList -> Nat .
 op granja : VacaList CerdoList Nat HuecoGranja PedidosList -> Granja [ctor] .
 op quitar-pedido : Granja -> Granja .

 eq tam(alistv) = 0 .
 eq tam(animal animList) = s(tam(animList)) .
 eq restar-animales-granja(0, animList) = animList .
 ceq restar-animales-granja(animARestar, animList animal) = restar-animales-granja(sd(animARestar, 1), animList) if animARestar > 0 .

 var animARestar : Nat .
 var animList : AnimalList .
 var animal : Animal .
 var estadoFurgo : EstadoFurgoneta .
 var granj : Granja .
 
 

endfm


fmod CLIENTES is
 pr NAT .
 sort Cliente .

 op cv : -> Cliente [ctor] .
 op cliente : Nat Nat -> Cliente [ctor] .

 vars cantCerdo cantVacuno : Nat .


endfm


fmod CARNICERIAS is
 pr CLIENTES .
 pr FURGONETA .
 pr GRANJA .

 sorts Carniceria EstadoCarniceria ColaClientes HuecoCarniceria LibretaGranjas .
 subsort Nat < LibretaGranjas .
 subsort Cliente < ColaClientes .

 op libretav : -> LibretaGranjas [ctor] .
 op __ : LibretaGranjas LibretaGranjas -> LibretaGranjas [assoc ctor id: libretav] .
 op hueco-carniceria : Furgo Bool -> HuecoCarniceria [ctor] .
 op cv : -> Carniceria [ctor] .
 op carniceria : Nat EstadoCarniceria Nat Nat ColaClientes HuecoCarniceria LibretaGranjas -> Carniceria [ctor] . ***idCarniceria EstadoCarniceria cantVacuno cantCerdo ColaClientes HuecoCarniceria LibretaGranjas
 ops abierta cerrada : -> EstadoCarniceria [ctor] .

 op hayHueco? : HuecoCarniceria -> Bool .
 eq hayHueco?(hueco-carniceria(furgo, false)) = true .
 eq hayHueco?(hueco-carniceria(furgo, true)) = false .

 op borra-granja : Nat LibretaGranjas -> LibretaGranjas .
 eq borra-granja(idGranja, idGranja) = libretav .
 eq borra-granja(idGranja libretaGranjas, idGranja) = libretaGranjas .
 eq borra-granja(libretaGranjas idGranja libretaGranjas', idGranja) = libretaGranjas libretaGranjas' .
 *** red(borra-granja(1 2 3 4, 2)) .

 op colav : -> ColaClientes [ctor] . 
 op __ : ColaClientes ColaClientes -> ColaClientes [ctor id: colav] .
 op clientes-pop : ColaClientes -> ColaClientes .
 op primero-cola : ColaClientes ~> Cliente .
 op inserta-cliente : Cliente ColaClientes -> ColaClientes [ctor] .

 eq clientes-pop(colav) = colav .
 eq clientes-pop(cliente colaClientes) = colaClientes .
 eq primero-cola(cliente colaClientes) = cliente .
 eq inserta-cliente(cliente, colav) = cliente .
 eq inserta-cliente(cliente, colaClientes) = colaClientes cliente .

***red(inserta-cliente(cliente(2, 1), inserta-cliente(cliente(2, 1), cv))) .
 op colaVacia? : ColaClientes -> Bool .
 eq colaVacia?(colav) = true .
 eq colaVacia?(colaClientes) = false [owise] .
 
 op cambia-estado : Carniceria -> Carniceria .
 ceq cambia-estado(carniceria(idCarniceria, abierta, cantVacuno, cantCerdo, colaClientes, huecoCarniceria, libretaGranjas)) = carniceria(idCarniceria, cerrada, cantVacuno, cantCerdo, colaClientes, huecoCarniceria, libretaGranjas) if colaVacia?(colaClientes) = true .

 op entrega-pedido : Carniceria -> Carniceria .
 eq entrega-pedido(carniceria(idCarniceria, estadoCarniceria, cantVacuno, cantCerdo, colaClientes, hueco-carniceria(furgo(idCarniceria, idGranja, cantVacuno', cantCerdo', reparto), true), libretaGranjas)) = carniceria(idCarniceria, estadoCarniceria, cantVacuno + cantVacuno', cantCerdo + cantCerdo', colaClientes, hueco-carniceria(furgo(idCarniceria, idGranja, 0, 0, vuelta), true), borra-granja(libretaGranjas, idGranja)) .

 vars cantCerdo cantVacuno cantCerdo' cantVacuno' idCarniceria : Nat .
 var estadoCarniceria : EstadoCarniceria .
 var colaClientes : ColaClientes .
 var huecoCarniceria : HuecoCarniceria .
 var libretaGranjas libretaGranjas' : LibretaGranjas .
 var cliente : Cliente .
 var furgo : Furgo .
 var idGranja : Nat .

endfm


fmod CARRETERAS is
 pr FURGONETA .
 pr NAT .

 sorts Carretera Sentido .
 subsort Furgo < Sentido .

 op carreterav : -> Carretera [ctor] .
 op carretera : Nat Nat Sentido Sentido -> Carretera [ctor] . ***id Granja, idCarniceria, ida(Granja-carniceria), vuelta(carniceria-granja)

 op sentidov : -> Sentido [ctor] .
 op __ : Sentido Sentido -> Sentido [assoc ctor id: sentidov] .
 op sentido-pop : Sentido -> Sentido .
 op primero-sentido : Sentido ~> Furgo .
 op inserta-furgo : Furgo Sentido -> Sentido .

 vars idGranja idCarniceria : Nat .
 vars ida vuelta sentido : Sentido .
 var furgo : Furgo .
 
 eq sentido-pop(sentidov) = sentidov .
 eq sentido-pop(furgo sentido) = sentido .
 eq primero-sentido(furgo sentido) = furgo .
 eq inserta-furgo(furgo, sentidov) = furgo .
 eq inserta-furgo(furgo, sentido) = sentido furgo .


endfm

mod SISTEMA_CARNICERIAS is
 pr CARNICERIAS .
 pr GRANJA .
 pr CARRETERAS .

 sorts ListGranja ListCarnicerias ListCarreteras Sistema .
 subsort Granja < ListGranja .
 subsort Carniceria < ListCarnicerias .
 subsort Carretera < ListCarreteras .

 op listGranjav : -> ListGranja [ctor] .
 op __ : ListGranja ListGranja -> ListGranja [assoc ctor id: listGranjav] .

 op listCarniceriasv : -> ListCarnicerias [ctor] .
 op __ : ListCarnicerias ListCarnicerias -> ListCarnicerias [assoc ctor id: listCarniceriasv] .

 op listCarreterasv : -> ListCarreteras [ctor] .
 op __ : ListCarreteras ListCarreteras -> ListCarreteras [assoc ctor id: listCarreterasv] .

 op sistema : ListGranja ListCarnicerias ListCarreteras -> Sistema [ctor] .

 var listCarnicerias : ListCarnicerias .
 var listGranja : ListGranja .
 var listCarreteras : ListCarreteras .
 var vacaList : VacaList .
 var cerdoList : CerdoList .
 vars idGranja idCarniceria cantVacunoPedido cantCerdoPedido cantVacunoCarniceria cantCerdoCarniceria cantVacunoFurgo cantCerdoFurgo : Nat .
 var pedList : PedidosList .
 var estadoCarniceria : EstadoCarniceria .
 var colaClientes : ColaClientes .
 var huecoCarniceria : HuecoCarniceria .
 var huecoGranja : HuecoGranja .
 var libretaGranjas : LibretaGranjas .
 var ida vuelta : Sentido .



 ops granja1 granja2 : -> Granja .
 ops listaVacaGranja1 listaVacaGranja2 : -> VacaList .
 ops listaCerdoGranja1 listaCerdoGranja2 : -> CerdoList . 
 ops listaPedidos1 listaPedidos2 : -> PedidosList .
 ops c1 c2 : -> Carniceria .
 ops furgo1 furgo2 : -> Furgo .
 ops pedido1 pedido2 pedido3 pedido4 : -> Pedido .
 ops libretaGranja1 libretaGranja2 : -> LibretaGranjas .
 ops cliente1 cliente2 cliente3 : -> Cliente .
 ops colaClientes1 colaClientes2 : -> ColaClientes .
 ops carretera1 carretera2 carretera3 carretera4 : -> Carretera .
 op listaCarretera1 : -> ListCarreteras .
 op listaGranja1 : -> ListGranja .
 op listaCarnicerias1 : -> ListCarnicerias .

 op sistema1 : -> Sistema .

 eq pedido1 = pedido(1, 4, 3) .
 eq pedido2 = pedido(2, 4, 3) .
 eq pedido3 = pedido(1, 1, 0) .
 eq pedido4 = pedido(2, 1, 0) .
 eq listaPedidos1 = pedido1 pedido2 . 
 eq listaPedidos2 = pedido3 pedido4 .
 eq listaVacaGranja1 = vaca vaca vaca vaca vaca .
 eq listaCerdoGranja1 = cerdo cerdo cerdo . 
 eq listaVacaGranja2 = vaca vaca .
 eq listaCerdoGranja2 = cerdo .
 eq furgo1 = furgo(0, 1, 0, 0, esperando) .
 eq furgo2 = furgo(0, 2, 0, 0, esperando) .
 eq granja1 = granja(listaVacaGranja1, listaCerdoGranja1, 1, hueco-granja(furgo1, false), listaPedidos1) .
 eq granja2 = granja(listaVacaGranja2, listaCerdoGranja2, 2, hueco-granja(furgo2, false), listaPedidos2) .
 eq libretaGranja1 = 1 2 .
 eq libretaGranja2 = 1 2 .
 eq cliente1 = cliente(1, 1) .
 eq cliente2 = cliente(0, 1) .
 eq cliente3 = cliente(0, 2) .
 eq colaClientes1 = inserta-cliente(cliente1, inserta-cliente(cliente2, colav)) .
 eq colaClientes2 = inserta-cliente(cliente3, colav) .
 eq c1 = carniceria(1, abierta, 0, 0, colaClientes1, hueco-carniceria(fv, true), libretaGranja1) .
 eq c2 = carniceria(2, abierta, 0, 0, colaClientes2, hueco-carniceria(fv, true), libretaGranja2) .
 eq carretera1 = carretera(1, 1, sentidov, sentidov) .
 eq carretera2 = carretera(1, 2, sentidov, sentidov) .
 eq carretera3 = carretera(2, 1, sentidov, sentidov) .
 eq carretera4 = carretera(2, 2, sentidov, sentidov) .
 eq listaCarretera1 = carretera1 carretera2 carretera3 carretera4 .
 eq listaGranja1 = granja1 granja2 .
 eq listaCarnicerias1 = c1 c2 .
 eq sistema1 = sistema(listaGranja1, listaCarnicerias1, listaCarretera1) .

 op furgo-a-carretera-vuelta : Sistema -> Sistema .
 eq furgo-a-carretera-vuelta(sistema(granj, carniceria(idCarniceria, estadoCarniceria, cantVacunoCarniceria, cantCerdoCarniceria, colaClientes, hueco-carniceria(furgo(idCarniceria, idGranja, cantVacunoFurgo, cantCerdoFurgo, vuelta), false), idGranja libretaGranjas), carretera(idGranja, idCarniceria, ida, vuelta))) 
    = sistema(granj, carniceria(idCarniceria, estadoCarniceria, cantVacunoCarniceria, cantCerdoCarniceria, colaClientes, hueco-carniceria(fv, true), idGranja libretaGranjas), carretera(idGranja, idCarniceria, ida, vuelta furgo(idCarniceria, idGranja, cantVacunoFurgo, cantCerdoFurgo, vuelta)) ) .
 op furgo-a-granja : Sistema -> Sistema .
 eq furgo-a-granja(sistema(granja(vacaList, cerdoList, idGranja, hueco-granja(fv, true), pedList) listGranja, carniceria(idCarniceria, estadoCarniceria, cantVacunoCarniceria, cantCerdoCarniceria, colaClientes, huecoCarniceria, idGranja libretaGranjas) listCarnicerias, carretera(idGranja, idCarniceria, ida, furgo(idCarniceria, idGranja, cantVacunoFurgo, cantCerdoFurgo, vuelta) vuelta) listCarreteras))
    = sistema(granja(vacaList, cerdoList, idGranja, hueco-granja(furgo(idCarniceria, idGranja, cantVacunoFurgo, cantCerdoFurgo, esperando), false), pedList) listGranja, carniceria(idCarniceria, estadoCarniceria, cantVacunoCarniceria, cantCerdoCarniceria, colaClientes, huecoCarniceria, idGranja libretaGranjas) listCarnicerias, carretera(idGranja, idCarniceria, ida, vuelta) listCarreteras) .
 
 op borrar-pedido-carniceria : Carniceria -> Carniceria .

 ceq borrar-pedido-carniceria(carniceria(idCarniceria, estadoCarniceria, cantVacunoCarniceria, cantCerdoCarniceria, inserta-cliente(cliente(cantCerdo, cantVaca), colaCliente), huecoCarniceria, idGranja libretaGranjas))
     = carniceria(idCarniceria, estadoCarniceria, sd(cantVacunoCarniceria, cantVaca), sd(cantCerdoCarniceria, cantCerdo), colaCliente, huecoCarniceria, idGranja libretaGranjas)
     if cantVacunoCarniceria >= cantVaca /\ cantCerdoCarniceria >= cantCerdo .

 op furgo-a-carretera : Sistema -> Sistema .
 eq furgo-a-carretera(sistema(granja(vacaList, cerdoList, idGranja, hueco-granja(furgo(idCarniceria, idGranja, cantVacunoFurgo, cantCerdoFurgo, reparto), true), pedido(idCarniceria, cantCerdoPedido, cantVacunoPedido) pedList) listGranja, carniceria(idCarniceria, estadoCarniceria, cantVacunoCarniceria, cantCerdoCarniceria, colaClientes, huecoCarniceria, idGranja libretaGranjas) listCarnicerias, carretera(idGranja, idCarniceria, ida, vuelta) listCarreteras)) = sistema(granja(vacaList, cerdoList, idGranja, hueco-granja(furgo(idGranja, idCarniceria, cantVacunoFurgo, cantCerdoFurgo, reparto), false), pedido(idCarniceria, cantCerdoPedido, cantVacunoPedido) pedList) listGranja, carniceria(idCarniceria, estadoCarniceria, cantVacunoCarniceria, cantCerdoCarniceria, colaClientes, huecoCarniceria, idGranja libretaGranjas) listCarnicerias, carretera(idGranja, idCarniceria, ida furgo(idGranja, idCarniceria, cantVacunoFurgo, cantCerdoFurgo, reparto), vuelta) listCarreteras) .

 op furgo-a-carniceria : Sistema -> Sistema .
 eq furgo-a-carniceria(sistema(granja(vacaList, cerdoList, idGranja, huecoGranja, pedido(idCarniceria, cantCerdoPedido, cantVacunoPedido) pedList) listGranja, carniceria(idCarniceria, estadoCarniceria, cantVacunoCarniceria, cantCerdoCarniceria, colaClientes, hueco-carniceria(furgo(idGranja, idCarniceria, cantVacunoFurgo, cantCerdoFurgo, reparto), false), idGranja libretaGranjas) listCarnicerias, carretera(idGranja, idCarniceria, furgo(idGranja, idCarniceria, cantVacunoFurgo, cantCerdoFurgo, reparto) ida, vuelta) listCarreteras)) = sistema(granja(vacaList, cerdoList, idGranja, huecoGranja, pedido(idCarniceria, cantCerdoPedido, cantVacunoPedido) pedList) listGranja, carniceria(idCarniceria, estadoCarniceria, cantVacunoCarniceria, cantCerdoCarniceria, colaClientes, hueco-carniceria(furgo(idGranja, idCarniceria, cantVacunoFurgo, cantCerdoFurgo, reparto), true), idGranja libretaGranjas) listCarnicerias, carretera(idGranja, idCarniceria, ida, vuelta) listCarreteras) .

 crl [furgo-reparto] : granja(vacaList, cerdoList, idGranja, hueco-granja(furgoneta, false), pedido(idCarniceria, cantVaca, cantCerdo) pedList) 
                        => granja(restar-animales-granja(cantVaca, vacaList), restar-animales-granja(cantCerdo, cerdoList), idGranja, hueco-granja(cambiar-a-reparto(idCarniceria, cantVaca, cantCerdo, furgoneta), true), pedList)
                        if tam(vacaList) >= cantVaca /\ tam(cerdoList) >= cantCerdo .
 
 var granj : Granja .
 vars cantCerdo cantVaca : Nat .
 var furgoneta : Furgo .
 var colaCliente : ColaClientes .
endm 

*** EJERCICIO 9
*** rew granja1 .

*** EJERCICIO 10
*** red(furgo-a-carretera(sistema(granja(vaca, cerdo, 1, hueco-granja(furgo(1, 1, 2, 2, reparto), true), pedido(1, 2, 2) plistv) listGranjav, carniceria(1, abierta, 0, 0, colav, hueco-carniceria(fv, false), 1 libretav) listCarniceriasv, carretera(1, 1, sentidov, sentidov) listCarreterasv))) .

*** EJERCICIO 11
*** red(furgo-a-carniceria(sistema(granja(vaca, cerdo, 1, hueco-granja(fv, false), pedido(1, 2, 2) plistv) listGranjav, carniceria(1, abierta, 0, 0, colav, hueco-carniceria(fv, false), 1 libretav) listCarniceriasv, carretera(1, 1, furgo(1, 1, 2, 2, reparto) ida, vuelta) listCarreterasv))) .

*** EJERCICIO 12
*** red(entrega-pedido(carniceria(1, abierta, 0, 0, colav, hueco-carniceria(furgo(1, 1, 2, 2, reparto), true), 1 2 3))) .

*** EJERCICIO 13
*** red(furgo-a-carretera-vuelta(sistema(granja(vaca, cerdo, 1, hueco-granja(furgo(1, 1, 2, 2, reparto), true), pedido(1, 2, 2) plistv) listGranjav, carniceria(1, abierta, 0, 0, colav, hueco-carniceria(furgo(1, 1, 2, 2, vuelta), false), 1 libretav) listCarniceriasv, carretera(1, 1, sentidov, sentidov) listCarreterasv))) .

*** EJERCICIO 14
*** red(furgo-a-granja(sistema(granja(vaca, cerdo, 1, hueco-granja(fv, true), pedido(1, 2, 2) plistv) listGranjav, carniceria(1, abierta, 0, 0, colav, hueco-carniceria(fv, true), 1 libretav) listCarniceriasv, carretera(1, 1, sentidov, furgo(1, 1, 2, 2, vuelta)) listCarreterasv))) .

*** EJERCICIO 15
*** red(borrar-pedido-carniceria(carniceria(1, abierta, 5, 5, colaClientes1, hueco-carniceria(fv, true), libretaGranja1))) .

*** EJERCICIO 16
*** red(cambia-estado(carniceria(1, abierta, 0, 0, colav, hueco-carniceria(fv, true), libretav))) .
*** red(cambia-estado(carniceria(1, abierta, 0, 0, inserta-cliente(cliente(2, 3), colav), hueco-carniceria(fv, true), libretav))) .


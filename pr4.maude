fmod PEDIDO is
 pr NAT .
 sort Pedido .

 op pv : -> Pedido [ctor] .
 op pedido : Nat Nat Nat -> Pedido [ctor] .

 vars idCarniceria cantVacuno cantCerdo: Nat .
 var pedido : Pedido .


endfm


fmod FURGONETA is
 pr PEDIDO .
 sorts Furgo Estado .

 op fv : -> Furgo [ctor] .
 op furgo : Nat Nat Nat Nat Estado -> Furgo [ctor] .

 vars reparto vuelta esperando : Estado .
 vars idCarniceria idGranja cantVacuno cantCerdo: Nat .
 var furgo : Furgo .


endfm


fmod GRANJA is
 pr FURGONETA .
 pr LIST .
 pr BOOL .

 sorts Granja Animal AnimalList PedidosList Hueco .
 subsort Animal < AnimalList .
 subsort Pedido < PedidosList .

 op gv : -> Granja [ctor] .
 op alistv : -> AnimalList [ctor] .
 op animalList(_,_) : AnimalList AnimalList -> AnimalList [assoc comm] .
 op plistv : -> PedidosList [ctor] .
 op pedidosList(_,_) : PedidosList PedidosList -> PedidosList [assoc comm] .
 op <_,_> : Furgo Bool -> Hueco [ctor] .

 op granja(_,_,_,_): AnimalList Nat Hueco PedidosList -> Granja [ctor] .

 var idGranja : Nat .
 var furgoneta : Furgo .
 vars vaca cerdo : Animal .
 var animList : AnimalList .
 var pedList : PedidosList .


endfm


fmod CLIENTES is
 pr NAT .
 sort Cliente .

 op cv : -> Cliente [ctor] .
 op cliente : Nat Nat -> Cliente [ctor] .

 vars cantCerdo cantVacuno : Nat .


endfm


fmod CARNICERIAS is
 pr CLIENTES .
 pr FURGONETA .
 pr GRANJA .

 sorts Carniceria Estado ColaClientes Hueco LibretaGranjas .

 op libretav : -> LibretaGranjas [ctor] .
 op libretaGr(_,_) : LibretaGranjas LibretaGranjas -> LibretaGranjas [assoc comm] .
 op <_,_> : Furgo Bool -> Hueco [ctor] .
 op cv : -> Carniceria [ctor] .
 op carniceria : Nat Estado Nat Nat ColaClientes Hueco LibretaGranjas -> Carniceria [ctor] .

 op clientes_pop : ColaClientes -> ColaClientes .
 op primero_cola : ColaClientes -> Cliente .
 op inserta_final_cola : Cliente ColaClientes -> ColaClientes .
 op colav : -> ColaClientes [ctor] .
 

 vars cantCerdo cantVacuno idCarniceria: Nat .
 vars abierta cerrada : Estado .

endfm


fmod CARRETERAS is
 pr FURGONETA .
 
 sorts Carretera Sentido .
 subsort Sentido < Carretera .

 op carreterav : -> Carretera [ctor] .
 op carretera(_,_) : Sentido Sentido -> Carretera [ctor] .

 op sentidov : -> Sentido [ctor] .
 op sentido_pop : Sentido -> Sentido .
 op primero_sentido : Sentido -> Furgo .
 op inserta_final_sentido : Furgo Sentido -> Sentido .
 
 
 vars ida vuelta : Sentido .
 
endfm

fmod SISTEMA_CARNICERIAS is
 pr CARNICERIAS .
 pr GRANJA .
 pr CARRETERAS .

 sorts ListGranja ListCarnicerias ListCarreteras .

 op listGranjav : -> ListGranja [ctor] .
 op inserta_granja : Granja ListGranja -> ListGranja [ctor] .
 op listGranja(_,_) : ListGranja ListGranja -> ListGranja [assoc comm] .

 op listCarniceriasv : -> ListCarnicerias [ctor] .
 op inserta_carniceria(_,_) : Carniceria ListCarnicerias -> ListCarnicerias [ctor] .
 op listCarnicerias(_,_) : ListCarnicerias ListCarnicerias -> ListCarnicerias [assoc comm] .

 op listCarreterasv : -> ListCarreteras [ctor] .
 op inserta_carretera(_,_) : Carretera ListCarreteras -> ListCarreteras [ctor] .
 op listCarreteras(_,_) : ListCarreteras ListCarreteras -> ListCarreteras [assoc comm] .

 op sistema(_,_,_) : ListGranja ListCarnicerias ListCarreteras -> Sistema [ctor] .


endfm 




